package handlers

import (
	"fmt"
	"log"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// UserAnswers –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserAnswers struct {
	CurrentQuestion *Question
	QuestionStack   []*Question
}

// Question –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
type Question struct {
	ID      string
	Text    string
	Options []Option
}

// Option –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
type Option struct {
	Text         string
	Data         string
	NextQuestion *Question // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
	Result       string    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–µ—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç)
}

var (
	userAnswersMap = make(map[int64]*UserAnswers)
	lastMessageID  int
	mu             sync.RWMutex
)

// HandleCallbackQuery –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Inline-–∫–Ω–æ–ø–∫–∏
func HandleCallbackQuery(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery) {
	chatID := callbackQuery.Message.Chat.ID
	userID := chatID

	mu.Lock()
	if _, ok := userAnswersMap[userID]; !ok {
		userAnswersMap[userID] = &UserAnswers{}
	}
	mu.Unlock()

	if callbackQuery.Data == "start" {
		mu.Lock()
		userAnswersMap[chatID] = &UserAnswers{
			CurrentQuestion: &questions[0], // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
		}
		mu.Unlock()

		editQuestion(bot, chatID, lastMessageID, &questions[0])
		return
	}

	if callbackQuery.Data == "back" {
		mu.Lock()
		if len(userAnswersMap[userID].QuestionStack) > 0 {
			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å—Ç–µ–∫–∞
			prevQuestion := userAnswersMap[userID].QuestionStack[len(userAnswersMap[userID].QuestionStack)-1]
			userAnswersMap[userID].QuestionStack = userAnswersMap[userID].QuestionStack[:len(userAnswersMap[userID].QuestionStack)-1]
			userAnswersMap[userID].CurrentQuestion = prevQuestion
			mu.Unlock()
			editQuestion(bot, chatID, lastMessageID, prevQuestion)
		} else {
			mu.Unlock()
		}
		return
	}

	if userAnswersMap[userID].CurrentQuestion != nil {
		for _, option := range userAnswersMap[userID].CurrentQuestion.Options {
			if callbackQuery.Data == option.Data {
				if option.Result != "" {
					sendResults(
						bot,
						lastMessageID,
						chatID,
						option.Data,
						option.Result,
					)
					mu.Lock()
					delete(userAnswersMap, userID)
					mu.Unlock()
					return
				}

				if option.NextQuestion != nil {
					// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Å—Ç–µ–∫
					mu.Lock()
					userAnswersMap[userID].QuestionStack = append(userAnswersMap[userID].QuestionStack, userAnswersMap[userID].CurrentQuestion)
					userAnswersMap[userID].CurrentQuestion = option.NextQuestion
					mu.Unlock()
					editQuestion(bot, chatID, lastMessageID, userAnswersMap[userID].CurrentQuestion)
				}
				break
			}
		}
	}

	callback := tgbotapi.NewCallback(callbackQuery.ID, "")
	if _, err := bot.Request(callback); err != nil {
		log.Println(err)
	}
}

// HandleMessage –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
func HandleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID

	if message.Command() == "start" {
		mu.Lock()
		userAnswersMap[chatID] = &UserAnswers{
			CurrentQuestion: &questions[0], // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
		}
		mu.Unlock()
		sendQuestion(bot, chatID, questions[0])
	}
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
func sendQuestion(bot *tgbotapi.BotAPI, chatID int64, question Question) {
	keyboard := createKeyboard(&question, chatID)

	msg := tgbotapi.NewMessage(chatID, question.Text)
	msg.ReplyMarkup = keyboard
	sentMsg, err := bot.Send(msg)
	if err != nil {
		log.Println("Error sending message:", err)
		return
	}

	lastMessageID = sentMsg.MessageID
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
func editQuestion(bot *tgbotapi.BotAPI, chatID int64, messageID int, question *Question) {
	keyboard := createKeyboard(question, chatID)

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		chatID,
		messageID,
		question.Text,
		keyboard,
	)

	if _, err := bot.Send(editMsg); err != nil {
		log.Println("Error editing message:", err)
	}
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
func createKeyboard(question *Question, chatID int64) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
	for _, option := range question.Options {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(option.Text, option.Data),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –µ—Å—Ç—å –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
	mu.Lock()
	if _, ok := userAnswersMap[chatID]; ok && len(userAnswersMap[chatID].QuestionStack) > 0 {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "back"),
		))
	}
	mu.Unlock()

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// sendResults –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Ç–≤–µ—Ç–æ–≤
func sendResults(
	bot *tgbotapi.BotAPI,
	messageID int,
	chatID int64,
	resultOption string,
	result string,
) {
	messageText := fmt.Sprintf("‚úÖ *–ü–æ–¥—Ö–æ–¥—è—â–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:* %s", result)
	messageText += "\n\n" + responseDescriptions[resultOption]

	// –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "start"),
		),
	)

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		chatID,
		messageID,
		messageText,
		keyboard,
	)
	editMsg.ParseMode = "Markdown"

	if _, err := bot.Send(editMsg); err != nil {
		log.Println("Error sending results:", err)
	}
}
