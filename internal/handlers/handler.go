package handlers

import (
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// UserAnswers –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserAnswers struct {
	Answers         map[string]string // questionID -> answer
	CurrentQuestion *Question         // –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
	QuestionStack   []*Question       // –°—Ç–µ–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
}

// Question –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
type Question struct {
	ID      string
	Text    string
	Options []Option
}

// Option –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
type Option struct {
	Text         string
	Data         string
	NextQuestion *Question // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
	Result       string    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–µ—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç)
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
var userAnswersMap = make(map[int64]*UserAnswers)

// –ú–∞–ø–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–ø—Ä–æ—Å–∞–º
var questionsMap = make(map[string]*Question)

// ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º
var lastMessageID int

// –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
var questions = []Question{
	{
		ID:   "q1",
		Text: "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–∑–æ–ª–æ–≥–∏—é",
		Options: []Option{
			{
				Text: "–†–∞–∫ –º–æ–ª–æ—á–Ω–æ–π –∂–µ–ª–µ–∑—ã",
				Data: "q1_option1",
				NextQuestion: &Question{
					ID:   "q1_1",
					Text: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø:",
					Options: []Option{
						{
							Text:   "–¢—Ä–∏–∂–¥—ã –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π",
							Data:   "q1_1_option1",
							Result: "AREAL",
						},
						{
							Text:   "HER2 pos.",
							Data:   "q1_1_option2",
							Result: "CL011101223 (–ü–µ—Ä—å–µ—Ç–∞ –†-—Ñ–∞—Ä–º)",
						},
						{
							Text:   "HER2 pos. –ò–ì–• 3+/2+",
							Data:   "q1_1_option3",
							Result: "BCD-267-1 (–≠–Ω—Ö–µ—Ä—Ç—É)",
						},
					},
				},
			},
			{
				Text: "–ö–æ–ª–æ—Ä–µ–∫—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∫",
				Data: "q1_option2",
				NextQuestion: &Question{
					ID:   "q2_1",
					Text: "–ö–∞–∫–∞—è –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ª–∏–Ω–∏—è –ª–µ—á–µ–Ω–∏—è?",
					Options: []Option{
						{
							Text:   "1 –ª–∏–Ω–∏—è",
							Data:   "q2_1_option1",
							Result: "CL01790199",
						},
						{
							Text:   "2 –ª–∏–Ω–∏—è",
							Data:   "q2_1_option2",
							Result: "–≥–µ–Ω–µ—Ä–∏—É–º",
						},
					},
				},
			},
			{
				Text: "–†–∞–∫ –ª–µ–≥–∫–æ–≥–æ",
				Data: "q1_option3",
				NextQuestion: &Question{
					ID:   "q3_1",
					Text: "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ-–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å:",
					Options: []Option{
						{
							Text:   "EGFR, ALK neg. PD-L >= 50%",
							Data:   "q3_1_option1",
							Result: "MIT-002",
						},
						{
							Text:   "EGFR, ALK neg. PD-L < 50%",
							Data:   "q3_1_option2",
							Result: "BEV-III/2022",
						},
					},
				},
			},
			{
				Text:   "–ú–µ–ª–∞–Ω–æ–º–∞",
				Data:   "q1_option4",
				Result: "MIT-002",
			},
			{
				Text:   "–†–∞–∫ –≥–æ–ª–æ–≤—ã –∏ —à–µ–∏",
				Data:   "q1_option5",
				Result: "—Ä-—Ñ–∞—Ä–º 2356",
			},
			{
				Text:   "–†–∞–∫ –∂–µ–ª—É–¥–∫–∞",
				Data:   "q1_option6",
				Result: "—Ä-—Ñ–∞—Ä–º 1339",
			},
		},
	},
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
func init() {
	for i := range questions {
		registerQuestions(&questions[i])
	}
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
func registerQuestions(q *Question) {
	questionsMap[q.ID] = q
	for _, opt := range q.Options {
		if opt.NextQuestion != nil {
			registerQuestions(opt.NextQuestion)
		}
	}
}

// HandleCallbackQuery –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Inline-–∫–Ω–æ–ø–∫–∏
func HandleCallbackQuery(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery) {
	chatID := callbackQuery.Message.Chat.ID
	userID := chatID

	if _, ok := userAnswersMap[userID]; !ok {
		userAnswersMap[userID] = &UserAnswers{
			Answers: make(map[string]string),
		}
	}

	userState := userAnswersMap[userID]

	if callbackQuery.Data == "start" {
		userAnswersMap[chatID] = &UserAnswers{
			Answers:         make(map[string]string),
			CurrentQuestion: &questions[0], // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
		}

		fmt.Println("----")
		fmt.Println(lastMessageID)
		fmt.Println("----")

		editQuestion(bot, chatID, lastMessageID, &questions[0])
		return
	}

	if callbackQuery.Data == "back" {
		if len(userState.QuestionStack) > 0 {
			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å—Ç–µ–∫–∞
			prevQuestion := userState.QuestionStack[len(userState.QuestionStack)-1]
			userState.QuestionStack = userState.QuestionStack[:len(userState.QuestionStack)-1]
			userState.CurrentQuestion = prevQuestion
			editQuestion(bot, chatID, lastMessageID, prevQuestion)
		}
		return
	}

	// –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
	if userState.CurrentQuestion != nil {
		for _, option := range userState.CurrentQuestion.Options {
			if callbackQuery.Data == option.Data {
				userState.Answers[userState.CurrentQuestion.ID] = option.Text

				if option.Result != "" {
					sendResults(
						bot,
						lastMessageID,
						chatID,
						option.Data,
						option.Result,
						userState.Answers,
						false,
					)
					delete(userAnswersMap, userID)
					return
				}

				if option.NextQuestion != nil {
					// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Å—Ç–µ–∫
					userState.QuestionStack = append(userState.QuestionStack, userState.CurrentQuestion)
					userState.CurrentQuestion = option.NextQuestion
					editQuestion(bot, chatID, lastMessageID, userState.CurrentQuestion)
				}
				break
			}
		}
	}

	callback := tgbotapi.NewCallback(callbackQuery.ID, "")
	if _, err := bot.Request(callback); err != nil {
		log.Println(err)
	}
}

// HandleMessage –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
func HandleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID

	if message.Command() == "start" {
		userAnswersMap[chatID] = &UserAnswers{
			Answers:         make(map[string]string),
			CurrentQuestion: &questions[0], // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
		}
		sendQuestion(bot, chatID, questions[0])
	}
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
func sendQuestion(bot *tgbotapi.BotAPI, chatID int64, question Question) {
	keyboard := createKeyboard(&question, chatID)

	msg := tgbotapi.NewMessage(chatID, question.Text)
	msg.ReplyMarkup = keyboard
	sentMsg, err := bot.Send(msg)
	if err != nil {
		log.Println("Error sending message:", err)
		return
	}

	lastMessageID = sentMsg.MessageID
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
func editQuestion(bot *tgbotapi.BotAPI, chatID int64, messageID int, question *Question) {
	keyboard := createKeyboard(question, chatID)

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		chatID,
		messageID,
		question.Text,
		keyboard,
	)

	if _, err := bot.Send(editMsg); err != nil {
		log.Println("Error editing message:", err)
	}
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
func createKeyboard(question *Question, chatID int64) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
	for _, option := range question.Options {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(option.Text, option.Data),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –µ—Å—Ç—å –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
	if userState, ok := userAnswersMap[chatID]; ok && len(userState.QuestionStack) > 0 {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "back"),
		))
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// sendResults –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Ç–≤–µ—Ç–æ–≤
func sendResults(
	bot *tgbotapi.BotAPI,
	messageID int,
	chatID int64,
	resultOption string,
	result string,
	answers map[string]string,
	showAnswers bool,
) {
	messageText := ""

	if showAnswers {
		messageText += "üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n\n"

		for qID, answer := range answers {
			if q, ok := questionsMap[qID]; ok {
				messageText += fmt.Sprintf("‚ñ´Ô∏è *%s*\n‚ûû %s\n\n", q.Text, answer)
			}
		}
	}

	messageText += fmt.Sprintf("‚úÖ *–ü–æ–¥—Ö–æ–¥—è—â–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:* %s", result)
	messageText += "\n\n" + responseDescriptions[resultOption]

	// –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "start"),
		),
	)

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		chatID,
		messageID,
		messageText,
		keyboard,
	)
	editMsg.ParseMode = "Markdown"

	if _, err := bot.Send(editMsg); err != nil {
		log.Println("Error sending results:", err)
	}
}
